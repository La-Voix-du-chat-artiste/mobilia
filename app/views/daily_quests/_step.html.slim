- daily_quest = step.mission.daily_quest

.step.handle.border.rounded-lg.p-2.hover:bg-gray-100.transition-all.hover:border-green-500.relative.dark:bg-slate-700/50.dark:text-white data-step-path=daily_quest_mission_step_path(daily_quest, step.mission, step) id=dom_id(step, 'mission') class=colour_for_step(step) class=('animate-pulse' if defined?(pending_placement) && pending_placement) class=('opacity-25 hover:opacity-100' if step.achieved?)
  header.flex.items-start.justify-between.mb-2
    - if step.customer_to_place?
      p.bg-blue-400.text-white.rounded-lg.text-xs.px-2.py-1 Aller
    - elsif step.place_to_customer?
      p.bg-blue-700.text-white.rounded-lg.text-xs.px-2.py-1 Retour
    - else
      p.mt-1.inline-block.bg-gray-700.text-white.rounded-lg.text-xs.px-2.py-1
        = step.role

    = render 'daily_quests/step_menu', step: step

  details open=!step.achieved?
    summary.text-sm class=(step.achieved? ? 'cursor-pointer' : 'cursor-move')
      .text-center
        .flex.items-center.justify-center.gap-2.mb-2
          p.panel-success= step.started_at ? l(step.started_at.round, format: '%Hh%M') : "XXX"
          | >>
          p.panel-success= step.arrival_at ? l(step.arrival_at.round, format: '%Hh%M') : "XXX"
        span.font-bold= step.title

    hr.border.border-gray-300.my-3.dark:border-gray-700

    .space-y-3.mb-3
      .flex.items-center.gap-2
        p.panel-success= step.started_at ? l(step.started_at.round, format: '%Hh%M') : "XXX"

        div
          p.text-xs.text-gray-400= step.departure_address.label

      .row.flex.items-center.justify-center.gap-3.p-2.text-xs
        <svg class="w-3 h-3 text-orange-500 animate-bounce" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 10 12">
          <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m1 7 4 4 4-4M1 1l4 4 4-4"/>
        </svg>

        p
          span= distance_of_time_in_words(step.duration * 60)
          |>< /
          span= number_to_human(step.distance * 1_000, units: :distance)

        <svg class="w-3 h-3 text-orange-500 animate-bounce" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 10 12">
          <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m1 7 4 4 4-4M1 1l4 4 4-4"/>
        </svg>

      .flex.items-center.gap-2.mb-2
        p.panel-success= step.arrival_at ? l(step.arrival_at.round, format: '%Hh%M') : "XXX"

        div
          p.text-xs.text-gray-400= step.arrival_address.label

    - unless step.achieved?
      = simple_form_for [daily_quest, step.mission, step], html: { class: 'mb-3' } do |f|
        - scope = Transporter.with_attached_photo.includes(:absences, :address).reject { |t| t.off?(daily_quest.started_on) }
        = f.association :transporter,
                        collection: transporters_select_options(scope),
                        include_blank: 'Assigner un chauffeur',
                        input_html: { \
                          class: 'w-full', \
                          data: { \
                            controller: 'slim-select', \
                            slim_select_only_desktop_value: true, \
                            slim_select_show_search_value: false, \
                            action: 'change->slim-select#submit' \
                          } \
                        },
                        label_html: { class: 'text-sm' },
                        wrapper_html: { class: 'w-full' }

    - if step.achieved?
      .panel-success class="!text-xs" Mission termin√©e üéâ (d√©termin√© algorithmiquement)
    - else
      = turbo_frame_tag dom_id(step) do
        = link_to 'Ajouter une remarque', edit_daily_quest_step_path(step.mission.daily_quest, step), class: 'underline text-sm'

    - if step.conflict?
      p.mt-2.text-center.panel-warning
        | ‚ö†Ô∏è Trajet en conflit
    - elsif step.impossible?
      p.mt-2.text-center.panel-error
        | ‚ö†Ô∏è Trajet impossible
