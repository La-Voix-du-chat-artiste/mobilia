.handle.border.rounded-lg.p-2.mb-2.hover:bg-gray-100.transition-colors.hover:border-green-500.relative.mb-8.dark:bg-slate-700/50.dark:text-white data-step-path=daily_quest_mission_step_path(step.mission.daily_quest, step.mission, step) id=dom_id(step, 'mission') class=colour_for_step(step) class=('animate-pulse' if defined?(pending_placement) && pending_placement)
  .absolute.-top-7.left-0
    - if step.customer_to_place?
      p.mt-1.inline-block.bg-blue-400.text-white.rounded-lg.text-xs.px-2.py-1 Aller
    - else
      p.mt-1.inline-block.bg-blue-700.text-white.rounded-lg.text-xs.px-2.py-1 Retour

  .cursor-move.mb-3
    header.flex.items-start.justify-between.mb-2
      p.font-bold.text-sm= step.title

      - if step.single?
        = link_to 'Placer', optimize_daily_quest_step_path(step.mission.daily_quest, step), class: 'inline-block btn-add !p-1', data: { turbo_method: :post, turbo_confirm: 'Voulez-vous placer automatiquement cette mission ?' }

    hr.border.border-gray-300.mb-2.dark:border-gray-700

    div
      .flex.items-center.gap-2.mb-2
        p.text-white.p-1.bg-green-500= step.started_at ? l(step.started_at.round, format: '%Hh%M') : "XXX"

        div
          p.text-xs.text-gray-400= step.departure_address.label

    <svg class="w-3 h-3 mt-1 mb-2 mx-auto text-gray-500" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 10 12">
      <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m1 7 4 4 4-4M1 1l4 4 4-4"/>
    </svg>

    .mb-3
      .flex.items-center.gap-2.mb-2
        p.text-white.p-1.bg-green-500= step.arrival_at ? l(step.arrival_at.round, format: '%Hh%M') : "XXX"

        div
          p.text-xs.text-gray-400= step.arrival_address.label

    p.row.px-2.py-1.text-xs.mb-3
      span= distance_of_time_in_words(step.duration * 60)
      |>< /
      span= number_to_human(step.distance * 1_000, units: :distance)

    = simple_form_for [step.mission.daily_quest, step.mission, step] do |f|
      - scope = Transporter.with_attached_photo.includes(:absences, :address).reject { |t| t.off?(step.mission.daily_quest.started_on) }
      = f.association :transporter,
                      collection: transporters_select_options(scope),
                      include_blank: 'Assigner un chauffeur',
                      input_html: { \
                        class: 'w-full', \
                        data: { \
                          controller: 'slim-select', \
                          slim_select_only_desktop_value: true, \
                          slim_select_show_search_value: false, \
                          action: 'change->slim-select#submit' \
                        } \
                      },
                      label_html: { class: 'text-sm' },
                      wrapper_html: { class: 'w-full' }

  = turbo_frame_tag dom_id(step) do
    = link_to 'Ajouter une remarque', edit_daily_quest_step_path(step.mission.daily_quest, step), class: 'underline text-sm'

  - if step.conflict?
    p.mt-1.p-1.bg-orange-500.rounded-lg.text-xs.text-white
      | ⚠️ Trajet en conflit
  - elsif step.impossible?
    p.mt-1.p-1.bg-red-500.rounded-lg.text-xs.text-white
      | ⚠️ Trajet impossible
